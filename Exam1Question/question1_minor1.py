# -*- coding: utf-8 -*-
"""Question1_Minor1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14TbO8Wr1XiXLwF2k_wSbi6XjkU87znIS
"""

import torch
import torch.nn as nn
import torch.nn.functional as F
import torchvision
import torchvision.transforms as transforms
import matplotlib.pyplot as plt
import numpy as np
from torch.utils.data import DataLoader
# Device configuration
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

# Hyper-parameters 
num_epochs = 5
batch_size = 4
learning_rate = 0.001

# dataset has PILImage images of range [0, 1]. 
# We transform them to Tensors of normalized range [-1, 1]
train_transform = transforms.Compose(
    [   transforms.RandomRotation(10),
        torchvision.transforms.GaussianBlur(kernel_size=3, sigma=(0.1, 2.0)),
        transforms.ToTensor(),
     transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))])
test_transform = transforms.Compose([
    transforms.ToTensor(),
    transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))])
# CIFAR10: 60000 32x32 color images in 10 classes, with 6000 images per class
train_dataset = torchvision.datasets.CIFAR10(root='./data', train=True,
                                        download=True, transform=train_transform)

test_dataset = torchvision.datasets.CIFAR10(root='./data', train=False,
                                       download=True, transform=test_transform)

train_loader = torch.utils.data.DataLoader(train_dataset, batch_size=batch_size,
                                          shuffle=True)

test_loader = torch.utils.data.DataLoader(test_dataset, batch_size=batch_size,
                                         shuffle=False)


def imshow(img):
    img = img / 2 + 0.5  # unnormalize
    npimg = img.numpy()
    plt.imshow(np.transpose(npimg, (1, 2, 0)))
    plt.show()


# get some random training images
dataiter = iter(train_loader)
images, labels = next(dataiter)

train_list = []
for b, (x, y) in enumerate(train_dataset):
  if y % 2 == 0:
    train_list.append(train_dataset[b])

test_list = []
for x, y in test_dataset:
  if y % 2 == 0:
    test_list.append((x, y))
  
print(len(train_list), len(test_list))

train_data = torch.utils.data.ConcatDataset([train_list])
test_data = torch.utils.data.ConcatDataset([test_list])

print(len(train_data), len(test_data))

# show images
imshow(torchvision.utils.make_grid(images))

train_loader = DataLoader(train_data, batch_size=batch_size,shuffle=True)
test_loader = DataLoader(test_data, batch_size=batch_size,shuffle=False)

dataiter = iter(train_loader)
images, labels = next(dataiter)

# show images
imshow(torchvision.utils.make_grid(images))
classes = ('plane', 'bird', 'deer', 'frog', 'ship')
num_epochs = 6

# class ConvNet(nn.Module):
#     def __init__(self):
#         super(ConvNet, self).__init__()
#         self.conv1 = nn.Conv2d(3, 16, 3, stride=1, padding=1)
#         self.conv2 = nn.Conv2d(16, 8, 3, stride=1, padding=1)
#         self.conv3 = nn.Conv2d(8, 4, 3, stride=1, padding=1)
#         self.conv4 = nn.Conv2d(4, 4, 3, stride=1, padding=1)
#         self.conv5 = nn.Conv2d(4, 2, 3, stride=1, padding=1)
#         self.conv6 = nn.Conv2d(2, 2, 3, stride=1, padding=1)
#         # self.conv2 = nn.Conv2d(6, 16, 5)
#         self.pool = nn.AvgPool2d(2, 2)
#         # self.fc1 = nn.Linear(16 * 5 * 5, 120)
#         self.fc1 = nn.Linear(2 * 16 * 16, 512)
#         # self.fc2 = nn.Linear(120, 84)
#         # self.fc3 = nn.Linear(84, 10)




class ConvNet(nn.Module):
    def __init__(self):
        super(ConvNet, self).__init__()
        self.conv1 = nn.Conv2d(3, 12, 3, stride=1, padding=1)
        self.conv2 = nn.Conv2d(12, 32, 3, stride=1, padding=0)
        self.conv3 = nn.Conv2d(32, 64, 3, stride=1, padding=0)
        self.conv4 = nn.Conv2d(64, 64, 3, stride=1, padding=0)
        self.conv5 = nn.Conv2d(64, 16, 3, stride=1, padding=0)
        self.conv6 = nn.Conv2d(16, 8, 3, stride=1, padding=1)
        self.pool = nn.AvgPool2d(2, 2)
        self.fc=nn.Linear(2*16*16,512)
        self.fc1 = nn.Linear(512, 5)
        torch.nn.init.xavier_normal_(self.conv1.weight, gain=1.0)
        torch.nn.init.xavier_normal_(self.conv2.weight, gain=1.0)
        torch.nn.init.xavier_normal_(self.conv3.weight, gain=1.0)
        torch.nn.init.xavier_normal_(self.conv4.weight, gain=1.0)
        torch.nn.init.xavier_normal_(self.conv5.weight, gain=1.0)
        torch.nn.init.xavier_normal_(self.conv6.weight, gain=1.0)
        


    def forward(self, x):
        x = self.pool(F.relu(self.conv1(x)))
        # print(x.shape)
        x = F.relu(self.conv2(x))
        # print(x.shape)
        x = F.relu(self.conv3(x))
        # print(x.shape)
        x = F.relu(self.conv4(x))
        # print(x.shape)
        x = F.relu(self.conv5(x))
        # print(x.shape)
        x = F.relu(self.conv6(x))
        # print(x.shape)
        x = x.view(-1, 2 * 16 * 16)
        # print(x.shape)
        x = F.relu(self.fc(x))
        # print(x.shape)
        x = F.relu(self.fc1(x))
        return x


    # def forward(self, x):
    #     x = F.relu(self.conv1(x))
    #     print(x.shape)
    #     x = self.pool(x)
    #     print(x.shape)
    #     x = F.relu(self.conv2(x))
    #     print(x.shape)
    #     x = F.relu(self.conv3(x))
    #     print(x.shape)
    #     x = F.relu(self.conv4(x))
    #     print(x.shape)
    #     x = F.relu(self.conv5(x))
    #     print(x.shape)
    #     x = F.relu(self.conv6(x))
    #     print(x.shape)
    #     x = x.view(-1, 2 * 16 * 16)
    #     print(x.shape)
    #     x = F.relu(self.fc1(x))
    #     print(x.shape)
    #     return x



model = ConvNet().to(device)

criterion = nn.CrossEntropyLoss()
optimizer = torch.optim.SGD(model.parameters(), lr=learning_rate)

n_total_steps = len(train_loader)

print(n_total_steps)

for epoch in range(num_epochs):
    for i, (images, labels) in enumerate(train_loader):
        # origin shape: [4, 3, 32, 32] = 4, 3, 1024
        # input_layer: 3 input channels, 6 output channels, 5 kernel size
        # Y =[]
        # for i in labels:
        #   print(f"i is {i}")
        #   if i.item() % 2 == 0:
        #     Y.append(i.item())
        # y = torch.tensor(Y)
        labels = labels//2
        images = images.to(device)
        labels = labels.to(device)
        
        # Forward pass
        outputs = model(images)
        loss = criterion(outputs, labels)

        # Backward and optimize
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()

        if (i+1) % 2000 == 0:
            print (f'Epoch [{epoch+1}/{num_epochs}], Step [{i+1}/{n_total_steps}], Loss: {loss.item():.4f}')

print('Finished Training')
PATH = './cnn.pth'
torch.save(model.state_dict(), PATH)

with torch.no_grad():
    n_correct = 0
    n_samples = 0
    n_class_correct = [0 for i in range(10)]
    n_class_samples = [0 for i in range(10)]
    for images, labels in test_loader:
        images = images.to(device)
        labels = labels.to(device)
        labels = labels//2
        outputs = model(images)
        # max returns (value ,index)
        _, predicted = torch.max(outputs, 1)
        n_samples += labels.size(0)
        n_correct += (predicted == labels).sum().item()
        
        for i in range(batch_size):
            label = labels[i]
            pred = predicted[i]
            if (label == pred):
                n_class_correct[label] += 1
            n_class_samples[label] += 1

    acc = 100.0 * n_correct / n_samples
    print(f'Accuracy of the network: {acc} %')

    for i in range(5):
        acc = 100.0 * n_class_correct[i] / n_class_samples[i]
        print(f'Accuracy of {classes[i]}: {acc} %')

with torch.no_grad():
    n_correct = 0
    n_samples = 0
    n_class_correct = [0 for i in range(10)]
    n_class_samples = [0 for i in range(10)]
    for images, labels in test_loader:
        images = images.to(device)
        labels = labels.to(device)
        labels = labels//2
        outputs = model(images)
        # max returns (value ,index)
        _, predicted = torch.max(outputs, 1)
        n_samples += labels.size(0)
        n_correct += (predicted == labels).sum().item()
        
        for i in range(batch_size):
            label = labels[i]
            pred = predicted[i]
            if (label == pred):
                n_class_correct[label] += 1
            n_class_samples[label] += 1

    acc = 100.0 * n_correct / n_samples
    print(f'Accuracy of the network: {acc} %')

    for i in range(5):
        acc = 100.0 * n_class_correct[i] / n_class_samples[i]
        print(f'Accuracy of {classes[i]}: {acc} %')

