# -*- coding: utf-8 -*-
"""Question2_Minor1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1T7TuQPvpMJm0vqHw3CD4NoVVvx7lc1pb
"""

import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
import torchvision
from torchvision import datasets, transforms
import numpy as np
import matplotlib.pyplot as plt
from torch.utils.data import DataLoader
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

# Hyper-parameters 
num_epochs = 5
batch_size = 4
learning_rate = 0.001

# dataset has PILImage images of range [0, 1]. 
# We transform them to Tensors of normalized range [-1, 1]
train_transform = transforms.Compose(
    [   transforms.RandomRotation(10),
        torchvision.transforms.GaussianBlur(kernel_size=3, sigma=(0.1, 2.0)),transforms.Grayscale(num_output_channels=1),
        transforms.ToTensor(),
     transforms.Normalize(mean=[0.5], std=[0.5])])
test_transform = transforms.Compose([transforms.Grayscale(num_output_channels=1),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.5], std=[0.5])])
# CIFAR10: 60000 32x32 color images in 10 classes, with 6000 images per class
train_dataset = torchvision.datasets.CIFAR10(root='./data', train=True,
                                        download=True, transform=train_transform)

test_dataset = torchvision.datasets.CIFAR10(root='./data', train=False,
                                       download=True, transform=test_transform)

train_loader = torch.utils.data.DataLoader(train_dataset, batch_size=batch_size,
                                          shuffle=True)

test_loader = torch.utils.data.DataLoader(test_dataset, batch_size=batch_size,
                                         shuffle=False)


def imshow(img):
    img = img / 2 + 0.5  # unnormalize
    npimg = img.numpy()
    plt.imshow(np.transpose(npimg, (1, 2, 0)))
    plt.show()


# get some random training images
dataiter = iter(train_loader)
images, labels = next(dataiter)

train_list = []
for b, (x, y) in enumerate(train_dataset):
  if y % 2 == 0:
    train_list.append(train_dataset[b])

test_list = []
for x, y in test_dataset:
  if y % 2 == 0:
    test_list.append((x, y))
  
print(len(train_list), len(test_list))

train_data = torch.utils.data.ConcatDataset([train_list])
test_data = torch.utils.data.ConcatDataset([test_list])

print(len(train_data), len(test_data))

# show images
imshow(torchvision.utils.make_grid(images))

train_loader = DataLoader(train_data, batch_size=batch_size,shuffle=True)
test_loader = DataLoader(test_data, batch_size=batch_size,shuffle=False)

dataiter = iter(train_loader)
images, labels = next(dataiter)

# show images
imshow(torchvision.utils.make_grid(images))
classes = ('plane', 'bird', 'deer', 'frog', 'ship')
num_epochs = 2

class Autoencoder(nn.Module):
    def __init__(self):
        super().__init__()        
        # N, 1, 28, 28
        self.encoder = nn.Sequential(
            nn.Conv2d(1, 16, 3, stride=2, padding=1), # -> N, 16, 14, 14
            nn.ReLU(),
            nn.Conv2d(16, 32, 3, stride=2, padding=1), # -> N, 32, 7, 7
            nn.ReLU(),
            nn.Conv2d(32, 128, 7) # -> N, 64, 1, 1
        )
        self.classification_layer1 = nn.Linear(128*2*2,512)
        self.classification_layer2 = nn.Linear(512,5)
        
        # N , 64, 1, 1
        self.decoder = nn.Sequential(
            nn.ConvTranspose2d(128, 32, 7), # -> N, 32, 7, 7
            nn.ReLU(),
            nn.ConvTranspose2d(32, 16, 3, stride=2, padding=1, output_padding=1), # N, 16, 14, 14 (N,16,13,13 without output_padding)
            nn.ReLU(),
            nn.ConvTranspose2d(16, 1, 3, stride=2, padding=1, output_padding=1), # N, 1, 28, 28  (N,1,27,27)
            nn.Sigmoid()
        )

    def forward(self, x):
        encoded = self.encoder(x)
        classi = encoded.view(-1, 128*2*2)
        classi = F.relu(self.classification_layer1(classi))
        classi = F.relu(self.classification_layer2(classi))
        decoded = self.decoder(encoded)
        return decoded,classi

    # def forward(self, x):
    #     encoded = self.encoder(x)
    #     print(encoded.shape)
    #     classi = encoded.view(-1, 128*2*2)
    #     print(classi.shape)
    #     classi = F.relu(self.classification_layer1(classi))
    #     print(classi.shape)
    #     classi = F.relu(self.classification_layer2(classi))
    #     print(classi.shape)
    #     decoded = self.decoder(encoded)
    #     return decoded,classi

model = Autoencoder()

criterion2 = nn.MSELoss()
criterion1 = nn.CrossEntropyLoss()
optimizer = torch.optim.Adam(model.parameters(),
                             lr=1e-3, 
                             weight_decay=1e-5)

num_epochs = 5
outputs = []
for epoch in range(num_epochs):
    for (img, labels) in train_loader:
        # recon,class_ = model(img)
        recon,class_ = model(img)
        loss1 = criterion1(class_,labels)
        loss2 = criterion2(recon, img)
        loss=loss1+loss2
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()

    print(f'Epoch:{epoch+1}, Loss:{loss.item():.4f}')
    outputs.append((epoch, img, recon))

# model.eval()
with torch.no_grad():
    n_correct = 0
    n_samples = 0
    n_class_correct = [0 for i in range(5)]
    n_class_samples = [0 for i in range(5)]
    for images, labels in test_loader:
        images = images.to(device)
        labels = labels.to(device)
        labels = labels//2
        _,outputs = model(images)
        # max returns (value ,index)
        _, predicted = torch.max(outputs, 1)
        n_samples += labels.size(0)
        n_correct += (predicted == labels).sum().item()
        
        for i in range(batch_size):
            label = labels[i]
            pred = predicted[i]
            if (label == pred):
                n_class_correct[label] += 1
            n_class_samples[label] += 1

    acc = 100.0 * n_correct / n_samples
    print(f'Accuracy of the network: {acc} %')

    for i in range(5):
        acc = 100.0 * n_class_correct[i] / n_class_samples[i]
        print(f'Accuracy of {classes[i]}: {acc} %')

for k in range(0, num_epochs, 4):
    plt.figure(figsize=(9, 2))
    plt.gray()
    imgs = outputs[k][1].detach().numpy()
    recon = outputs[k][2].detach().numpy()
    for i, item in enumerate(imgs):
        if i >= 9: break
        plt.subplot(2, 9, i+1)
        plt.imshow(item[0])
            
    for i, item in enumerate(recon):
        if i >= 9: break
        plt.subplot(2, 9, 9+i+1) 
        plt.imshow(item[0])



class Autoencoder_hp(nn.Module):
    def __init__(self):
        super().__init__()        
        # N, 1, 28, 28
        self.dropout = nn.Dropout(0.25)
        self.encoder = nn.Sequential(
            nn.Conv2d(1, 16, 3, stride=2, padding=1), # -> N, 16, 14, 14
            nn.ReLU(),
            nn.Conv2d(16, 32, 3, stride=2, padding=1), # -> N, 32, 7, 7
            nn.ReLU(),
            nn.Conv2d(32, 128, 7) # -> N, 64, 1, 1
        )
        self.classification_layer1 = nn.Linear(128*2*2,512)
        self.classification_layer2 = nn.Linear(512,10)
        
        # N , 64, 1, 1
        self.decoder = nn.Sequential(
            nn.ConvTranspose2d(128, 32, 7), # -> N, 32, 7, 7
            nn.ReLU(),
            nn.ConvTranspose2d(32, 16, 3, stride=2, padding=1, output_padding=1), # N, 16, 14, 14 (N,16,13,13 without output_padding)
            nn.ReLU(),
            nn.ConvTranspose2d(16, 1, 3, stride=2, padding=1, output_padding=1), # N, 1, 28, 28  (N,1,27,27)
            nn.Sigmoid()
        )

    def forward(self, x):
        encoded = model.encoder(x)
        classi = encoded.view(-1, 128*2*2)
        classi = self.dropout(classi)
        classi = F.relu(self.classification_layer1(classi))
        classi = self.dropout(classi)
        classi = F.relu(self.classification_layer2(classi))
        # decoded = self.decoder(encoded)
        return classi

    # def forward(self, x):
    #     encoded = self.encoder(x)
    #     print(encoded.shape)
    #     classi = encoded.view(-1, 128*2*2)
    #     print(classi.shape)
    #     classi = F.relu(self.classification_layer1(classi))
    #     print(classi.shape)
    #     classi = F.relu(self.classification_layer2(classi))
    #     print(classi.shape)
    #     decoded = self.decoder(encoded)
    #     return decoded,classi

model_hp = Autoencoder()

criterion2 = nn.MSELoss()
criterion1 = nn.CrossEntropyLoss()
optimizer = torch.optim.Adam(model_hp.parameters(),
                             lr=1e-3, 
                             weight_decay=1e-5)

num_epochs = 5
outputs = []
for epoch in range(num_epochs):
    for (img, labels) in train_loader:
        # recon,class_ = model(img)
        recon,class_ = model_hp(img)
        loss1 = criterion1(class_,labels)
        loss2 = criterion2(recon, img)
        loss=loss1+loss2
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()

    print(f'Epoch:{epoch+1}, Loss:{loss.item():.4f}')
    outputs.append((epoch, img, recon))

with torch.no_grad():
    n_correct = 0
    n_samples = 0
    n_class_correct = [0 for i in range(5)]
    n_class_samples = [0 for i in range(5)]
    for images, labels in test_loader:
        images = images.to(device)
        labels = labels.to(device)
        labels = labels//2
        _,outputs = model_hp(images)
        # max returns (value ,index)
        _, predicted = torch.max(outputs, 1)
        n_samples += labels.size(0)
        n_correct += (predicted == labels).sum().item()
        
        for i in range(batch_size):
            label = labels[i]
            pred = predicted[i]
            if (label == pred):
                n_class_correct[label] += 1
            n_class_samples[label] += 1

    acc = 100.0 * n_correct / n_samples
    print(f'Accuracy of the network: {acc} %')

    for i in range(5):
        acc = 100.0 * n_class_correct[i] / n_class_samples[i]
        print(f'Accuracy of {classes[i]}: {acc} %')